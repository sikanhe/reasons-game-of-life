// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function cellToInt(grid, param) {
  var exit = 0;
  var val;
  try {
    val = Caml_array.caml_array_get(Caml_array.caml_array_get(grid, param[0]), param[1]);
    exit = 1;
  }
  catch (exn){
    return 0;
  }
  if (exit === 1) {
    if (val !== 0) {
      return 0;
    } else {
      return 1;
    }
  }
  
}

function neighborsAlive(i, j, grid) {
  return List.fold_left((function (acc, n) {
                return acc + n | 0;
              }), 0, List.map((function (param) {
                    return cellToInt(grid, param);
                  }), /* :: */[
                  /* tuple */[
                    i,
                    j + 1 | 0
                  ],
                  /* :: */[
                    /* tuple */[
                      i,
                      j - 1 | 0
                    ],
                    /* :: */[
                      /* tuple */[
                        i - 1 | 0,
                        j
                      ],
                      /* :: */[
                        /* tuple */[
                          i + 1 | 0,
                          j
                        ],
                        /* :: */[
                          /* tuple */[
                            i + 1 | 0,
                            j + 1 | 0
                          ],
                          /* :: */[
                            /* tuple */[
                              i - 1 | 0,
                              j + 1 | 0
                            ],
                            /* :: */[
                              /* tuple */[
                                i - 1 | 0,
                                j - 1 | 0
                              ],
                              /* :: */[
                                /* tuple */[
                                  i + 1 | 0,
                                  j - 1 | 0
                                ],
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]));
}

function evolve(grid) {
  var size = grid.length;
  var newGrid = $$Array.make_matrix(size, size, /* Dead */1);
  for(var i = 0 ,i_finish = size - 1 | 0; i <= i_finish; ++i){
    for(var j = 0 ,j_finish = size - 1 | 0; j <= j_finish; ++j){
      var match = Caml_array.caml_array_get(Caml_array.caml_array_get(grid, i), j);
      var match$1 = neighborsAlive(i, j, grid);
      Caml_array.caml_array_set(Caml_array.caml_array_get(newGrid, i), j, match !== 0 ? (
              match$1 !== 3 ? /* Dead */1 : /* Alive */0
            ) : (
              match$1 === 3 || match$1 === 2 ? /* Alive */0 : /* Dead */1
            ));
    }
  }
  return newGrid;
}

function toggleCell(i, j, grid) {
  var newGrid = $$Array.copy(grid);
  var col = $$Array.copy(Caml_array.caml_array_get(newGrid, i));
  var cell = Caml_array.caml_array_get(col, j);
  if (cell !== 0) {
    Caml_array.caml_array_set(col, j, /* Alive */0);
    Caml_array.caml_array_set(newGrid, i, col);
  } else {
    Caml_array.caml_array_set(col, j, /* Dead */1);
    Caml_array.caml_array_set(newGrid, i, col);
  }
  return newGrid;
}

function make(state, onClick, _) {
  var newrecord = ReasonReact.statelessComponent("Cell").slice();
  newrecord[/* render */9] = (function () {
      return React.createElement("div", {
                  style: {
                    backgroundColor: state !== 0 ? "#fff" : "#000",
                    border: "1px solid #666",
                    height: "50px",
                    width: "50px"
                  },
                  onClick: onClick
                });
    });
  return newrecord;
}

var Cell = /* module */[/* make */make];

function make$1(size, _) {
  var newrecord = ReasonReact.reducerComponent("Conway").slice();
  newrecord[/* render */9] = (function (self) {
      return React.createElement("div", undefined, React.createElement("button", {
                      onClick: (function () {
                          return Curry._1(self[/* send */3], /* Evolve */0);
                        })
                    }, "Evolve"), $$Array.mapi((function (i, row) {
                        return React.createElement("div", {
                                    key: String(i),
                                    style: {
                                      display: "flex"
                                    }
                                  }, $$Array.mapi((function (j, cellState) {
                                          return ReasonReact.element(/* Some */[String(j)], /* None */0, make(cellState, (function () {
                                                            return Curry._1(self[/* send */3], /* Toggle */[
                                                                        i,
                                                                        j
                                                                      ]);
                                                          }), /* array */[]));
                                        }), row));
                      }), self[/* state */1]));
    });
  newrecord[/* initialState */10] = (function () {
      return $$Array.make_matrix(size, size, /* Dead */1);
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (action) {
        return /* Update */Block.__(0, [toggleCell(action[0], action[1], state)]);
      } else {
        return /* Update */Block.__(0, [evolve(state)]);
      }
    });
  return newrecord;
}

exports.cellToInt = cellToInt;
exports.neighborsAlive = neighborsAlive;
exports.evolve = evolve;
exports.toggleCell = toggleCell;
exports.Cell = Cell;
exports.make = make$1;
/* react Not a pure module */
